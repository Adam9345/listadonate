{"version":3,"sources":["channels4_banner.png","components/message/index.tsx","components/switch/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Message","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messageLogin","messageDate","messageSelected","storage_login","storage_date","onSelectMessage","bind","assertThisInitialized","dateFromStorage","localStorage","getItem","loginFromStorage","setState","value","content","replace","__html","concat","e","document","getSelection","type","tempLogin","currentTarget","firstChild","textContent","tempDate","nextSibling","parentElement","childNodes","forEach","element","finalElement","classList","remove","setItem","toString","theme","add","messageSelect","_this$props","index","_this$state","amountNetto","Math","fround","payment","amount_netto","toFixed","dateF","Date","created_at","dateNow","yesterdayDate","setDate","getDate","day","month","getMonth","newMonth","hour","getHours","minute","getMinutes","second","getSeconds","newDate","getFullYear","newContent","changeUrl","urls","match","finalUrls","date2daysBack","selectedColor","login","react_default","a","createElement","onClick","style","display","className","currency","provider","dangerouslySetInnerHTML","createMarkup","React","PureComponent","Switch","toggleChange","checked","onChange","Component","App","isChecked","limit","listLength","listOfMsgs","showButton","isActiveList","fetchMessages","scrollEvent","scrollToTop","JSON","parse","title","window","innerHeight","pageYOffset","body","offsetHeight","scrollY","_this2","myBody","calls","method","params","offset","url","lang","token","linkApi","fetch","stringify","headers","Access-Control-Allow-Origin","Content-Type","then","response","json","data","results","createdDonateDate","isDateNotOK","_fetchNewMessages","asyncToGenerator","regenerator_default","mark","_callee","newResponse","newData","wrap","_context","prev","next","sent","abrupt","stop","apply","arguments","fetchNewMessages","datas","reverse","_this3","list","length","map","message","key","height","fontSize","_this4","scroll","top","behavior","src","banner","alt","components_switch","renderMsgs","Boolean","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1d0096c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/channels4_banner.7947a779.png\";","import React from \"react\";\r\nimport \"./style.scss\";\r\n\r\nclass Message extends React.PureComponent<any, any> {\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tmessageLogin: '',\r\n\t\t\tmessageDate: '',\r\n\t\t\tmessageSelected: false,\r\n\t\t\tstorage_login: '',\r\n\t\t\tstorage_date: ''\r\n\t\t}\r\n\r\n\t\tthis.onSelectMessage = this.onSelectMessage.bind(this);\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tconst dateFromStorage = localStorage.getItem('message_date');\r\n\t\tconst loginFromStorage = localStorage.getItem('message_login');\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tstorage_login: loginFromStorage,\r\n\t\t\tstorage_date: dateFromStorage\r\n\t\t})\r\n\t}\r\n\r\n  public changeUrl() {\r\n    const {value} = this.props;\r\n\t\tconst {content} = value;\r\n\r\n    const urls = content.replace(\"https:\", \"https://\");\r\n    const ytLinks = urls.replace(\"youtube.com\", \"youtube.com/\");\r\n\r\n    const picosongLinks = ytLinks.replace(\"picosong.com\", \"picosong.com/\");\r\n\r\n    const ytShortLinks = picosongLinks.replace(\"youtu.be\", \"youtu.be/\");\r\n\r\n    const sCLinks = ytShortLinks.replace(\"soundcloud.com\", \"soundcloud.com/\");\r\n\r\n    const finalSCLinks = sCLinks.replace(\"[...]\", \"/\");\r\n\r\n    return finalSCLinks;\r\n  }\r\n\r\n  public createMarkup(content: any) {\r\n    return { __html: `${content}` };\r\n\t}\r\n\t\r\n\tpublic onSelectMessage(e: React.MouseEvent) {\r\n\t\tif(!(document.getSelection()!.type === 'Range')) {\r\n\t\tconst tempLogin = e.currentTarget.firstChild!.firstChild!.textContent;\r\n\t\tconst tempDate = e.currentTarget.firstChild!.nextSibling!.firstChild!.textContent;\r\n\r\n\t\tconst allMessages = e.currentTarget.parentElement!.childNodes;\r\n\r\n\t\tallMessages.forEach(element => {\r\n\t\t\tconst finalElement = element as HTMLElement;\r\n\r\n\t\t\tfinalElement.classList.remove('selectDark');\r\n\t\t\tfinalElement.classList.remove(\"selectLight\");\r\n\t\t})\r\n\r\n\t\tlocalStorage.setItem('message_login', tempLogin!.toString());\r\n\t\tlocalStorage.setItem('message_date', tempDate!.toString());\r\n\r\n\t\tif (this.props.theme){\r\n\t\t\te.currentTarget.classList.add(\"selectDark\");\r\n\t\t} else {\r\n\t\t\te.currentTarget.classList.add('selectLight');\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tmessageSelected: !this.state.messageSelect,\r\n\t\t\tmessageLogin: tempLogin,\r\n\t\t\tmessageDate: tempDate,\r\n\t\t});\r\n\t}\r\n\t}\r\n\r\n  public render() {\r\n\r\n\t\tconst {value, theme, index} = this.props;\r\n\t\t\r\n\t\tconst {messageLogin, messageDate, messageSelected, storage_login, storage_date} = this.state;\r\n\r\n    const amountNetto = Math.fround(value.payment.amount_netto / 100).toFixed(2);\r\n\r\n\t\tconst dateF = new Date(value.created_at);\r\n\t\t\r\n\t\tconst dateNow = new Date();\r\n\r\n\t\tconst yesterdayDate = new Date();\r\n\t\tyesterdayDate.setDate(yesterdayDate.getDate() - 1);\r\n\r\n    const day = dateF.getDate() < 10 ? `0${dateF.getDate()}` : dateF.getDate();\r\n    const month = dateF.getMonth() + 1;\r\n    const newMonth = month < 10 ? `0${month}` : month;\r\n\r\n    const hour = dateF.getHours() < 10 ? `0${dateF.getHours()}` : dateF.getHours();\r\n    const minute = dateF.getMinutes() < 10 ? `0${dateF.getMinutes()}` : dateF.getMinutes();\r\n    const second = dateF.getSeconds() < 10 ? `0${dateF.getSeconds()}` : dateF.getSeconds();\r\n\r\n    const newDate = `${day}-${newMonth}-${dateF.getFullYear()} ${hour}:${minute}:${second}`;\r\n\r\n    const newContent = this.changeUrl();\r\n\r\n    const urls = newContent.match(/\\bhttps?:\\/\\/\\S+/);\r\n\r\n\t\tconst finalUrls = newContent.replace(urls, `<a href=\"${urls}\">${urls}</a>`);\r\n\t\t\r\n\t\tconst date2daysBack = (dateNow.getDate() == dateF.getDate()) || (yesterdayDate.getDate() == dateF.getDate());\r\n\r\n\t\tconst selectedColor = (value.login == storage_login) && (newDate == storage_date)\r\n\t\t\t? theme ? 'selectDark' : 'selectLight' : '';\r\n\r\n    return (\r\n      <div onClick={this.onSelectMessage} style={date2daysBack ? {}: {display: 'none'}} className={`${selectedColor} message_container ${theme ? \"message_container_dark_theme\" : \"\"}`}>\r\n        <div className=\"message_flex\">\r\n          <div className=\"message_login\">{value.login}</div>\r\n          <div className=\"message_currency\">\r\n            {amountNetto} {value.payment.currency}\r\n          </div>\r\n        </div>\r\n        <div className=\"message_flex\">\r\n          <div className=\"message_date_prov\">{newDate}</div>\r\n          <div className=\"message_date_prov\">\r\n            Płatność: {value.payment.provider}\r\n          </div>\r\n        </div>\r\n        <div className=\"message_content\" dangerouslySetInnerHTML={this.createMarkup(finalUrls)} />\r\n        <div className=\"numberOfDonate\">{index + 1}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\ninterface IProps {\r\n  checked: boolean;\r\n  toggleChange: () => void;\r\n}\r\n\r\nclass Switch extends Component<IProps, {}> {\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.toggleChange = this.toggleChange.bind(this);\r\n  }\r\n\r\n  public toggleChange() {\r\n    this.props.toggleChange();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"switch_container\">\r\n        <label className=\"switch\">\r\n          <input type=\"checkbox\" checked={this.props.checked} onChange={this.toggleChange}/>\r\n          <span className=\"slider round\" />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Switch;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Message from \"./components/message\";\nimport Switch from \"./components/switch\";\nimport banner from \"./channels4_banner.png\";\n\n//{\"calls\":[{\"url\":\"/user/page/getMessagesByLogin\",\"method\":\"POST\",\"params\":{\"offset\":0,\"limit\":100,\"login\":\"brudna-malpa\"}}],\"token\":\"0\",\"lang\":\"pl\"}\n\ninterface IState {\n  isChecked: boolean;\n  listOfMsgs: object[];\n  login: string;\n  limit: number;\n  showButton: boolean;\n  listLength: number;\n  isActiveList: boolean;\n}\n\nclass App extends React.PureComponent<{}, IState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      isChecked: true,\n      limit: 0,\n      listLength: 10,\n      listOfMsgs: [],\n      login: \"\",\n      showButton: false,\n      isActiveList: true,\n    };\n\n    this.toggleChange = this.toggleChange.bind(this);\n    this.fetchMessages = this.fetchMessages.bind(this);\n    this.scrollEvent = this.scrollEvent.bind(this);\n    this.scrollToTop = this.scrollToTop.bind(this);\n    // this.switchToTips = this.switchToTips.bind(this);\n    // this.switchToList = this.switchToList.bind(this);\n  }\n\n  public componentDidMount() {\n    if (localStorage.getItem(\"dark_theme\")) {\n      this.setState({\n        isChecked: JSON.parse(localStorage.getItem(\"dark_theme\") || \"\"),\n      });\n    }\n\n    document.title = \"Lista donate: brudna-malpa\";\n    this.fetchMessages();\n\n    // window.addEventListener(\"scroll\", this.scrollEvent, true);\n  }\n\n  public componentWillUnmount() {\n    // window.removeEventListener(\"scroll\", this.scrollEvent, true);\n  }\n\n  public scrollEvent() {\n\n    if ((window.innerHeight + window.pageYOffset) >= (document.body.offsetHeight - window.innerHeight)) {\n      this.setState({\n        listLength: this.state.listLength + 10,\n      });\n    }\n\n    if (window.scrollY > window.innerHeight) {\n      this.setState({\n        showButton: true,\n      });\n    } else {\n      this.setState({\n        showButton: false,\n      });\n    }\n  }\n\n  public fetchMessages() {\n    const myBody = {\n      calls: [{\n        method: \"POST\",\n        params: {\n          limit: 1,\n          login: \"brudna-malpa\",\n          offset: 0,\n        },\n        url: \"/user/page/getMessagesByLogin\",\n      }],\n      lang: \"pl\",\n      token: \"0\",\n\t\t};\n\t\t\n\t\tconst linkApi = \"https://prod.tipanddonation.com/api/core/batchcall\";\n\n    try {\n      fetch(linkApi, {\n        body: JSON.stringify(myBody),\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n      })\n      .then((response) => response.json())\n      .then((data) => {\n\t\t\t\t// console.log(data[myBody.calls[0].url].data.results);\n\t\t\t\tconst results = data[myBody.calls[0].url].data.results;\n\n\t\t\t\tconst createdDonateDate =\n\t\t\t\t\tdata[myBody.calls[0].url].data.data[0].created_at;\n\t\t\t\tconst dateDonate = new Date(`${createdDonateDate}`);\n\n\t\t\t\tconst isDateNotOK =\n\t\t\t\t\t\tdateDonate.getFullYear() !== new Date().getFullYear();\n\n\t\t\t\t// async function fetchOldMessages() {\n\t\t\t\t// \tconst myBodyOldTemp = {\n\t\t\t\t// \t\tcalls: [\n\t\t\t\t// \t\t\t{\n\t\t\t\t// \t\t\t\tmethod: \"POST\",\n\t\t\t\t// \t\t\t\tparams: {\n\t\t\t\t// \t\t\t\t\tlimit: 150,\n\t\t\t\t// \t\t\t\t\tlogin: \"brudna-malpa\",\n\t\t\t\t// \t\t\t\t\toffset: 0\n\t\t\t\t// \t\t\t\t},\n\t\t\t\t// \t\t\t\turl: \"/user/page/getMessagesByLogin\"\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t],\n\t\t\t\t// \t\tlang: \"pl\",\n\t\t\t\t// \t\ttoken: \"0\"\n\t\t\t\t// \t};\n\n\t\t\t\t// \tconst newResponse = await fetch(\n\t\t\t\t// \t\t\"https://prod.tipanddonation.com/core/batchcall\",\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\tbody: JSON.stringify(myBodyOldTemp),\n\t\t\t\t// \t\t\theaders: {\n\t\t\t\t// \t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t// \t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t// \t\t\t},\n\t\t\t\t// \t\t\tmethod: \"POST\"\n\t\t\t\t// \t\t}\n\t\t\t\t// \t);\n\n\t\t\t\t// \tconst newData = await newResponse.json();\n\n\t\t\t\t// \treturn newData[myBodyOldTemp.calls[0].url].data.data;\n\t\t\t\t// }\n\n\t\t\t\tasync function fetchNewMessages() {\n\t\t\t\t\tmyBody.calls[0].params.limit = 150;\n\t\t\t\t\tmyBody.calls[0].params.offset = (isDateNotOK) ? results - 150 : 0;\n\t\t\t\t\t// const myBodyNextTemp = {\n\t\t\t\t\t// \tcalls: [\n\t\t\t\t\t// \t\t{\n\t\t\t\t\t// \t\t\tmethod: \"POST\",\n\t\t\t\t\t// \t\t\tparams: {\n\t\t\t\t\t// \t\t\t\tlimit: 150,\n\t\t\t\t\t// \t\t\t\tlogin: \"brudna-malpa\",\n\t\t\t\t\t// \t\t\t\toffset: (isDateNotOK) ?  \n\t\t\t\t\t// \t\t\t\t\tresults - 150 :\n\t\t\t\t\t// \t\t\t\t\t0\n\t\t\t\t\t// \t\t\t},\n\t\t\t\t\t// \t\t\turl: \"/user/page/getMessagesByLogin\"\n\t\t\t\t\t// \t\t}\n\t\t\t\t\t// \t],\n\t\t\t\t\t// \tlang: \"pl\",\n\t\t\t\t\t// \ttoken: \"0\"\n\t\t\t\t\t// };\n\n\t\t\t\t\tconst newResponse = await fetch(linkApi, {\n\t\t\t\t\t\tbody: JSON.stringify(myBody),\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmethod: \"POST\"\n\t\t\t\t\t});\n\n\t\t\t\t\tconst newData = await newResponse.json();\n\n\n\t\t\t\t\treturn newData[myBody.calls[0].url].data.data\n\t\t\t\t}\n\n\t\t\t\t// const createdDonateDate = data[myBody.calls[0].url].data.data[0].created_at;\n\t\t\t\t// const dateDonate = new Date(`${createdDonateDate}`);\n\n\t\t\t\t// if(dateDonate.getFullYear() !== new Date().getFullYear()) {\n\t\t\t\t// \tfetchNewMessages().then(datas => {\n\t\t\t\t// \t\tthis.setState({\n\t\t\t\t// \t\t\tlistOfMsgs: datas.reverse()\n\t\t\t\t// \t\t});\n\t\t\t\t// \t});\n\t\t\t\t// } else {\n\t\t\t\t// \tfetchOldMessages().then(oldWayDatas => {\n\t\t\t\t// \t\tthis.setState({\n\t\t\t\t// \t\t\tlistOfMsgs: oldWayDatas\n\t\t\t\t// \t\t});\n\t\t\t\t// \t})\n\t\t\t\t// }\n\n\t\t\t\tfetchNewMessages().then(datas => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tlistOfMsgs: (isDateNotOK) ? (datas) ? datas.reverse() : [] : datas \n\t\t\t\t\t})\n\t\t\t\t})\n      });\n    } catch (e) {\n      // Error\n    }\n  }\n\n  public renderMsgs() {\n\t\tconst list = this.state.listOfMsgs;\n\n    // const listLimit = list !== undefined ? list.slice(0, this.state.listLength) : undefined;\n\n    return list.length > 0 ? list.map((value: any, index) => (\n      <Message key={index} value={value} theme={this.state.isChecked} index={index}/>\n    )) : (\n\t\t\t<div style={{height: \"100vh\", fontSize: \"2em\"}}>\n\t\t\t</div>\n\t\t);\n  }\n\n  public toggleChange() {\n    this.setState({\n      isChecked: !this.state.isChecked,\n    }, () => {\n      localStorage.setItem(\"dark_theme\", this.state.isChecked.toString());\n    });\n  }\n\n  public scrollToTop() {\n    window.scroll({top: 0, behavior: \"smooth\"});\n  }\n\n  // public switchToTips() {\n  //   this.setState({\n  //     isActiveList: false\n  //   });\n  // }\n\n  // public switchToList() {\n\t// \tthis.fetchMessages();\n  //   this.setState({\n  //     isActiveList: true\n\t// \t});\n  // }\n\n  public render() {\n    const { isChecked, showButton, isActiveList } = this.state;\n\n    return (\n\t\t\t<div className={`App ${isChecked ? \"dark_theme\" : \"light_theme\"}`}>\n\t\t\t\t<img\n\t\t\t\t\tclassName=\"banner\"\n\t\t\t\t\tsrc={banner}\n\t\t\t\t\talt=\"brudna_malpa_banner\"\n\t\t\t\t/>\n\t\t\t\t<Switch checked={isChecked} toggleChange={this.toggleChange} />\n\t\t\t\t{/* <div className={`page-container ${isChecked ? \"switchPageButtonsContainerDark\" : \"switchPageButtonsContainerLight\"}`}>\n          <button className={`switchPageButton ${isChecked ? isActiveList ? \"isActiveButtonDark\" : \"\" : isActiveList ? \"isActiveButtonLight\" : \"\"}`} onClick={this.switchToList} disabled={isActiveList ? true : false}>Lista</button>\n          <button className={`switchPageButton ${isChecked ? isActiveList ? \"\" : \"isActiveButtonDark\" : isActiveList ? \"\" : \"isActiveButtonLight\"}`} onClick={this.switchToTips}>Napiwki</button>\n        </div> */}\n\t\t\t\t{this.state.listOfMsgs.length > 0 ? (\n\t\t\t\t\t<div className=\"page-container\">{this.renderMsgs()}</div>\n\t\t\t\t) : (\n\n\t\t\t\t\t// <div className=\"page-container\">\n\t\t\t\t\t// \t<iframe\n\t\t\t\t\t// \t\ttitle=\"tipanddonation\"\n\t\t\t\t\t// \t\tstyle={{ width: \"100%\", height: \"94vh\" }}\n\t\t\t\t\t// \t\tsrc=\"https://tipanddonation.com/brudna-malpa\"\n\t\t\t\t\t// \t></iframe>\n\t\t\t\t\t// </div>\n\t\t\t\t\tnull\n\t\t\t\t)}\n\t\t\t\t<div\n\t\t\t\t\tonClick={this.scrollToTop}\n\t\t\t\t\tclassName={`arrow-up ${isChecked ? \"arrow-up-dark-theme\" : \"\"}`}\n\t\t\t\t\tstyle={{ display: showButton ? \"block\" : \"none\" }}\n\t\t\t\t>\n\t\t\t\t\t&#x2191;\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import NewApp from \"./NewApp\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}